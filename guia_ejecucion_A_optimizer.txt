GUÍA DE EJECUCIÓN DEL SISTEMA A_OPTIMIZER
=============================================

Fecha: 2025-04-09

Esta guía describe en detalle cómo ejecutar el sistema A_optimizer, incluyendo la preparación del entorno, la ejecución con parámetros predefinidos y la ejecución con grid search para optimización de parámetros.

1. PREPARACIÓN DEL ENTORNO
--------------------------

Antes de ejecutar el sistema A_optimizer, asegúrese de que el entorno esté correctamente configurado:

a) Dependencias:
   - Python 3.8 o superior
   - pandas
   - numpy
   - mysql-connector-python
   - python-dotenv
   - fastapi (para la API ATR)
   - uvicorn (para la API ATR)

b) Estructura de directorios:
   - Asegúrese de que todos los módulos tengan archivos __init__.py
   - Verifique que la estructura de directorios sea correcta:
     * actions/evolve/A_optimizer/detection.py
     * actions/evolve/A_optimizer/range.py
     * actions/evolve/A_optimizer/breakout.py
     * apis/indicators/atr/A_atr.py

c) Base de datos:
   - Verifique que la base de datos MySQL esté configurada
   - Asegúrese de que las tablas necesarias existan:
     * A_detection_params
     * A_detection_data
     * A_range_params
     * A_range_data
     * A_breakout_params
     * A_breakout_data
   - Si las tablas no existen, puede crearlas ejecutando:
     ```
     python create_A_optimizer_tables.py
     ```

d) Variables de entorno:
   - Cree un archivo .env en el directorio raíz con las siguientes variables:
     * MYSQL_HOST=localhost
     * MYSQL_USER=su_usuario
     * MYSQL_PASSWORD=su_contraseña
     * MYSQL_DATABASE=binance_lob
     * API_BASE_URL=http://localhost:8000

e) Datos:
   - Asegúrese de tener datos de prueba en el directorio data/
   - Los datos deben estar en formato CSV con las columnas adecuadas

2. EJECUCIÓN CON PARÁMETROS PREDEFINIDOS
----------------------------------------

Para ejecutar el sistema A_optimizer con parámetros predefinidos, siga estos pasos:

a) Abra una terminal y navegue al directorio raíz del proyecto.

b) Ejecute el script principal:
   ```
   python execute_A_optimizer_manual.py
   ```
   
   Si tiene problemas con la base de datos, puede usar la versión simplificada:
   ```
   python execute_A_optimizer_simple.py
   ```

c) El script realizará las siguientes operaciones:
   - Cargará los datos de BTCUSDC-5m-2025-04-08.csv
   - Detectará velas clave utilizando parámetros predefinidos:
     * volume_percentile_threshold: 80
     * body_percentage_threshold: 30
     * lookback_candles: 20
   - Calculará rangos dinámicos utilizando parámetros predefinidos:
     * atr_period: 14
     * atr_multiplier: 1.5
   - Evaluará breakouts utilizando parámetros predefinidos:
     * breakout_threshold_percentage: 0.5
     * max_candles_to_return: 3
   - Guardará los resultados en A_optimizer_results.json
   - Guardará los resultados en la base de datos (si se usa execute_A_optimizer_manual.py)

d) Revise los resultados en la terminal y en el archivo JSON generado.

e) Para verificar los resultados en la base de datos, puede usar cualquier cliente MySQL y ejecutar consultas como:
   ```sql
   SELECT * FROM A_detection_params ORDER BY id DESC LIMIT 1;
   SELECT * FROM A_detection_data WHERE param_id = [ID_del_param];
   SELECT * FROM A_range_params ORDER BY id DESC LIMIT 1;
   SELECT * FROM A_range_data WHERE param_id = [ID_del_param];
   SELECT * FROM A_breakout_params ORDER BY id DESC LIMIT 1;
   SELECT * FROM A_breakout_data WHERE param_id = [ID_del_param];
   ```

3. EJECUCIÓN CON GRID SEARCH (OPTIMIZACIÓN DE PARÁMETROS)
--------------------------------------------------------

Para ejecutar el sistema A_optimizer con grid search para optimizar los parámetros, siga estos pasos:

a) Abra el archivo execute_A_optimizer_manual.py y modifique la última línea:
   ```python
   if __name__ == "__main__":
       # Cambiar False por True para activar grid search
       run_A_optimizer(use_grid_search=True)
   ```

b) Abra una terminal y navegue al directorio raíz del proyecto.

c) Ejecute el script principal:
   ```
   python execute_A_optimizer_manual.py
   ```

d) El script realizará las siguientes operaciones:
   - Cargará los datos de BTCUSDC-5m-2025-04-08.csv
   
   - Optimización de parámetros de detección:
     * Generará combinaciones de parámetros para el módulo de detección
     * Evaluará cada combinación y seleccionará la mejor según el porcentaje de velas clave detectadas
     * Utilizará los mejores parámetros para detectar velas clave
   
   - Optimización de parámetros de rango:
     * Generará combinaciones de parámetros para el módulo de rango
     * Evaluará cada combinación y seleccionará la mejor según la cobertura de rango
     * Utilizará los mejores parámetros para calcular rangos dinámicos
   
   - Optimización de parámetros de breakout:
     * Generará combinaciones de parámetros para el módulo de breakout
     * Evaluará cada combinación y seleccionará la mejor según el ratio de breakouts válidos
     * Utilizará los mejores parámetros para evaluar breakouts
   
   - Guardará los resultados en A_optimizer_results.json

e) Revise los resultados en la terminal y en el archivo JSON generado.

4. DETALLES DEL PROCESO DE GRID SEARCH
-------------------------------------

El proceso de grid search para cada módulo funciona de la siguiente manera:

a) Módulo de detección:
   - Parámetros evaluados:
     * volume_percentile_threshold: [75, 80, 85, 90]
     * body_percentage_threshold: [20, 25, 30, 35, 40]
     * lookback_candles: [15, 20, 25, 30]
   - Métrica de evaluación:
     * Porcentaje de velas clave detectadas respecto al total de velas analizadas
   - Función objetivo:
     * Maximizar el porcentaje de velas clave detectadas

b) Módulo de rango:
   - Parámetros evaluados:
     * atr_period: [7, 14, 21, 28]
     * atr_multiplier: [1.0, 1.5, 2.0, 2.5]
   - Métrica de evaluación:
     * Cobertura promedio de rango (diferencia entre límites superior e inferior dividida por el precio de referencia)
   - Función objetivo:
     * Maximizar la cobertura promedio de rango

c) Módulo de breakout:
   - Parámetros evaluados:
     * breakout_threshold_percentage: [0.3, 0.5, 0.7, 1.0]
     * max_candles_to_return: [1, 2, 3, 5]
   - Métrica de evaluación:
     * Ratio de breakouts válidos respecto al total de rangos evaluados
   - Función objetivo:
     * Maximizar el ratio de breakouts válidos

5. INTERPRETACIÓN DE RESULTADOS
------------------------------

Los resultados del sistema A_optimizer se pueden interpretar de la siguiente manera:

a) Velas clave:
   - Son velas con alto volumen y cuerpo pequeño
   - Indican posibles puntos de interés en el mercado
   - Un porcentaje bajo (5-10%) es normal y deseable

b) Rangos dinámicos:
   - Definen zonas de soporte y resistencia alrededor de las velas clave
   - Se calculan utilizando el ATR para adaptarse a la volatilidad del mercado
   - La cobertura debe ser suficiente para capturar movimientos significativos

c) Breakouts válidos:
   - Indican rupturas significativas de los rangos establecidos
   - Pueden ser alcistas (up) o bajistas (down)
   - El porcentaje de breakout indica la fuerza de la ruptura

6. PRÓXIMOS PASOS
----------------

Para mejorar el sistema A_optimizer, considere los siguientes pasos:

a) Implementar validación cruzada:
   - Dividir los datos en conjuntos de entrenamiento y prueba
   - Validar los parámetros optimizados en datos no vistos
   - Evitar el sobreajuste a los datos de entrenamiento

b) Utilizar métodos de optimización más avanzados:
   - Optimización bayesiana en lugar de grid search
   - Algoritmos genéticos para explorar el espacio de parámetros
   - Optimización por enjambre de partículas

c) Integrar con el sistema de trading:
   - Conectar con FreakStage para la ejecución de señales
   - Implementar backtesting completo con métricas de rendimiento
   - Añadir gestión de riesgo y dimensionamiento de posiciones

7. SOLUCIÓN DE PROBLEMAS
-----------------------

Si encuentra problemas al ejecutar el sistema A_optimizer, verifique lo siguiente:

a) Errores de importación:
   - Asegúrese de que todos los módulos tengan archivos __init__.py
   - Verifique que la estructura de directorios sea correcta
   - Compruebe que todas las dependencias estén instaladas

b) Errores de base de datos:
   - Verifique la conexión a la base de datos MySQL
   - Asegúrese de que las tablas necesarias existan
   - Compruebe las credenciales en el archivo .env
   - Si tiene problemas con la base de datos, puede ejecutar el script de prueba:
     ```
     python test_db_connection.py
     ```
   - Si las tablas no existen, créelas con:
     ```
     python create_A_optimizer_tables.py
     ```
   - Si persisten los problemas, use la versión simplificada del script que no requiere base de datos:
     ```
     python execute_A_optimizer_simple.py
     ```

c) Errores de datos:
   - Verifique que los datos estén en el formato correcto
   - Asegúrese de que las columnas tengan los nombres esperados
   - Compruebe que haya suficientes datos para el análisis

d) Errores de API:
   - Verifique que la API ATR esté en funcionamiento
   - Asegúrese de que la URL base sea correcta
   - Compruebe que la API devuelva los valores esperados

e) Problemas de codificación de caracteres:
   - Si ve caracteres extraños en la salida, puede ser un problema de codificación
   - Intente ejecutar los scripts con el parámetro -u:
     ```
     python -u execute_A_optimizer_simple.py
     ```
