GUÍA DE PRUEBAS DEL SISTEMA A_OPTIMIZER
=========================================

Este documento detalla los pasos necesarios para probar el sistema A_optimizer, incluyendo la configuración inicial, ejecución de pruebas individuales y verificación del funcionamiento completo.

1. REQUISITOS PREVIOS
--------------------

Antes de comenzar las pruebas, asegúrese de tener:

a) Base de datos MySQL:
   - Base de datos 'binance_lob' creada
   - Usuario con permisos para crear tablas y realizar operaciones CRUD
   - Variables de entorno configuradas en el archivo .env:
     * MYSQL_HOST
     * MYSQL_USER
     * MYSQL_PASSWORD
     * MYSQL_DATABASE=binance_lob

b) Datos de prueba:
   - Archivo CSV en data/BTCUSDC-5m-2025-04-08/BTCUSDC-5m-2025-04-08.csv
   - Formato OHLCV con columnas para timestamp, open, high, low, close, volume, etc.

c) Dependencias de Python:
   - pandas
   - numpy
   - fastapi
   - uvicorn
   - mysql-connector-python
   - python-dotenv
   - requests

2. INICIAR EL SERVIDOR API
-------------------------

El primer paso es iniciar el servidor FastAPI para que la API del indicador ATR esté disponible:

```bash
# Desde el directorio raíz del proyecto
cd c:\Users\vaclav\aia4you
python -m uvicorn main:app --reload --port 8000
```

Esto iniciará el servidor en http://localhost:8000. Puede verificar que el servidor está funcionando correctamente accediendo a:
- Documentación de la API: http://localhost:8000/docs
- Endpoint ATR: http://localhost:8000/indicators/atr?period=14&symbol=BTCUSDC

3. PRUEBAS INDIVIDUALES DE COMPONENTES
-------------------------------------

### 3.1 Prueba del Módulo de Detección

Para probar solo el módulo de detección:

```bash
# Desde el directorio raíz del proyecto
cd c:\Users\vaclav\aia4you
python -c "from actions.evolve.A_optimizer.detection import A_Detection; detector = A_Detection(); print('Tablas creadas correctamente' if detector else 'Error al crear tablas')"
```

### 3.2 Prueba del Módulo de Rango

Para probar solo el módulo de rango:

```bash
# Desde el directorio raíz del proyecto
cd c:\Users\vaclav\aia4you
python -c "from actions.evolve.A_optimizer.range import A_Range; range_calculator = A_Range(); print('Tablas creadas correctamente' if range_calculator else 'Error al crear tablas')"
```

### 3.3 Prueba del Módulo de Breakout

Para probar solo el módulo de breakout:

```bash
# Desde el directorio raíz del proyecto
cd c:\Users\vaclav\aia4you
python -c "from actions.evolve.A_optimizer.breakout import A_Breakout; breakout_evaluator = A_Breakout(); print('Tablas creadas correctamente' if breakout_evaluator else 'Error al crear tablas')"
```

4. PRUEBA COMPLETA DEL SISTEMA
-----------------------------

Para ejecutar una prueba completa de todos los componentes:

```bash
# Desde el directorio raíz del proyecto
cd c:\Users\vaclav\aia4you
python actions/check/A_optimizer_test.py
```

Este script realizará las siguientes pruebas:
- Prueba del módulo de detección
- Prueba del módulo de rango con integración de API ATR
- Prueba del módulo de breakout
- Prueba del proceso completo de optimización

El script mostrará resultados detallados para cada componente y un resumen final del estado de las pruebas.

5. EJECUCIÓN DEL PROCESO DE OPTIMIZACIÓN COMPLETO
-----------------------------------------------

Para ejecutar el proceso de optimización completo con todos los parámetros:

```bash
# Desde el directorio raíz del proyecto
cd c:\Users\vaclav\aia4you
python -c "from actions.run.A_optimizer_runner import A_OptimizerRunner; runner = A_OptimizerRunner(); data = runner.load_data(); results = runner.run_full_optimization(data) if data is not None else None; print(f'Resultados de optimización: {results}')"
```

Este comando cargará los datos, ejecutará el proceso completo de optimización para los tres componentes y mostrará los resultados.

6. VERIFICACIÓN DE LA BASE DE DATOS
---------------------------------

Para verificar que las tablas se han creado correctamente y contienen datos:

```bash
# Conectarse a MySQL y ejecutar consultas
mysql -u [usuario] -p[contraseña] -h [host] binance_lob

# Consultas para verificar las tablas
SHOW TABLES LIKE 'A_%';
SELECT COUNT(*) FROM A_detection_params;
SELECT COUNT(*) FROM A_range_params;
SELECT COUNT(*) FROM A_breakout_params;
SELECT COUNT(*) FROM A_detection_data;
SELECT COUNT(*) FROM A_range_data;
SELECT COUNT(*) FROM A_breakout_data;
```

7. PRUEBA DE LA API ATR
---------------------

Para probar específicamente la API ATR:

```bash
# Usando curl desde la línea de comandos
curl "http://localhost:8000/indicators/atr?period=14&symbol=BTCUSDC"

# Usando Python
python -c "import requests; response = requests.get('http://localhost:8000/indicators/atr', params={'period': 14, 'symbol': 'BTCUSDC'}); print(response.json())"
```

8. SOLUCIÓN DE PROBLEMAS COMUNES
------------------------------

a) Error de conexión a la base de datos:
   - Verificar que MySQL está en ejecución
   - Comprobar las credenciales en el archivo .env
   - Asegurarse de que la base de datos 'binance_lob' existe

b) Error al cargar los datos:
   - Verificar que el archivo CSV existe en la ruta correcta
   - Comprobar el formato del CSV (debe tener las columnas esperadas)

c) Error en la API ATR:
   - Verificar que el servidor FastAPI está en ejecución
   - Comprobar que la URL y los parámetros son correctos
   - Revisar los logs del servidor para errores específicos

d) Resultados de optimización no esperados:
   - Aumentar el número de parámetros para el grid search (max_params)
   - Verificar que los datos tienen suficiente volatilidad para detectar patrones
   - Ajustar los rangos de parámetros en los métodos generate_grid_search_params

9. INTERPRETACIÓN DE RESULTADOS
-----------------------------

a) Detección:
   - Un buen resultado identifica entre 5-15% de las velas como "clave"
   - Performance score cercano a 10% es óptimo

b) Rango:
   - Coverage entre 60-80% indica un buen equilibrio
   - Performance score cercano a 70% es óptimo

c) Breakout:
   - Combined score alto indica buena capacidad para identificar breakouts válidos
   - Ratio de breakouts válidos/total > 50% es deseable
   - Ratio de operaciones rentables/válidas > 60% es deseable

10. PRÓXIMOS PASOS
----------------

Una vez verificado el funcionamiento básico del sistema, considere:

a) Integración con estrategias existentes:
   - Conectar con FreakStage para la ejecución de señales
   - Integrar con el sistema de backtesting para evaluación histórica

b) Mejoras en la optimización:
   - Implementar validación cruzada para evitar sobreajuste
   - Añadir más métricas de rendimiento (drawdown, Sharpe ratio)
   - Considerar métodos de optimización más avanzados (evolutivos o bayesianos)

c) Visualización de resultados:
   - Crear dashboards para monitorear el rendimiento
   - Implementar gráficos para visualizar rangos y breakouts
